import React from "react";
import { Form, FormGroup, Label, Button } from "reactstrap";
import { Formik, Field } from "formik";
import * as Yup from "yup";
import logger from "sabio-debug";
import PropTypes from "prop-types";
const _logger = logger.extend("StepOne");
class StepThree extends React.Component {
  state = {
    formData: {
      name: "",
      description: "",
      statusId: ""
    }
  };

  componentDidMount() {
    if (this.props.editData) {
      this.setState({ formData: this.props.editData });
    }
  }

  handleSubmit = (values, { resetForm }) => {
    _logger("Values are ", values);
    //if you want to reset form you can use Formik's own method but you need to pass the object to reset the form to
    this.props.changeStep(values);
    resetForm(this.state.formData);
  };

  render() {
    return (
      <React.Fragment>
        <Formik
          enableReinitialize={true}
          validationSchema={Yup.object().shape({
            name: Yup.string().required(
              <small className="muted form-text text-muted">*Required</small>
            ),
            description: Yup.string().required(
              <small className="muted form-text text-muted">*Required</small>
            ),
            statusId: Yup.string().required(
              <small className="muted form-text text-muted">*Required</small>
            )
          })}
          initialValues={this.state.formData}
          onSubmit={this.handleSubmit}
        >
          {props => {
            const {
              values,
              touched,
              errors,
              handleSubmit,
              isInitialValid,
              isSubmitting
            } = props;
            return (
              <Form onSubmit={handleSubmit} className="col-sm-12 pt-4">
                <h5 style={{ fontSize: "20px" }}>Step Three</h5>
                <FormGroup>
                  <Label>Name</Label>
                  <Field
                    name="name"
                    type="text"
                    values={values.name}
                    placeholder="Name"
                    autoComplete="off"
                    className={
                      errors.name && touched.name
                        ? "form-control error"
                        : "form-control"
                    }
                  />
                  {errors.name && touched.name && (
                    <span className="input-feedback">{errors.name}</span>
                  )}
                </FormGroup>
                <FormGroup>
                  <Label>Description</Label>
                  <Field
                    name="description"
                    type="text"
                    values={values.description}
                    placeholder="Description"
                    autoComplete="off"
                    className={
                      errors.description && touched.description
                        ? "form-control error"
                        : "form-control"
                    }
                  />
                  {errors.description && touched.description && (
                    <span className="input-feedback">{errors.description}</span>
                  )}
                </FormGroup>
                <FormGroup>
                  <Label>Status</Label>
                  <Field
                    name="statusId"
                    component="select"
                    values={values.statusId}
                    label="Status"
                    className={
                      errors.statusId && touched.statusId
                        ? "form-control error"
                        : "form-control"
                    }
                    as="select"
                  >
                    <option value="">Select Status</option>
                    <option value="1">Active</option>
                    <option value="2">Inactive</option>
                    <option value="3">Pending</option>
                  </Field>
                  {errors.statusId && touched.statusId && (
                    <span className="input-feedback">{errors.statusId}</span>
                  )}
                </FormGroup>
                <div className="row mb-3">
                  <div className="col-6">
                    <div className="row d-flex justify-content-start">
                      <Button
                        type="submit"
                        onClick={this.props.prevStep}
                        className="mr-3"
                      >
                        Previous
                      </Button>
                    </div>
                  </div>
                  <div className="col-6">
                    <div className="row d-flex justify-content-end">
                      <Button
                        type="submit"
                        disabled={isInitialValid || isSubmitting}
                      >
                        Next
                      </Button>
                    </div>
                  </div>
                </div>
              </Form>
            );
          }}
        </Formik>
      </React.Fragment>
    );
  }
}
export default StepThree;
StepThree.propTypes = {
  changeStep: PropTypes.func.isRequired,
  prevStep: PropTypes.func.isRequired,
  editData: PropTypes.shape({
    lastName: PropTypes.string,
    content: PropTypes.string,
    activeId: PropTypes.string
  })
};
